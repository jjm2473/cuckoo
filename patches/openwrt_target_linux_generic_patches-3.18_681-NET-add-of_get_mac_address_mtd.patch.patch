Index: openwrt/target/linux/generic/patches-3.18/681-NET-add-of_get_mac_address_mtd.patch
===================================================================
---openwrt/target/linux/generic/patches-3.18/681-NET-add-of_get_mac_address_mtd.patch	
+++openwrt/target/linux/generic/patches-3.18/681-NET-add-of_get_mac_address_mtd.patch	
@@ -23,7 +23,7 @@
  
  /**
   * of_get_phy_mode - Get phy mode for given device_node
-@@ -75,3 +76,39 @@ const void *of_get_mac_address(struct de
+@@ -75,3 +76,54 @@ const void *of_get_mac_address(struct de
  	return NULL;
  }
  EXPORT_SYMBOL(of_get_mac_address);
@@ -37,6 +37,7 @@
 +	const char *part;
 +	const __be32 *list;
 +	phandle phandle;
++	char macbuf[20];
 +
 +	list = of_get_property(np, "mtd-mac-address", &size);
 +	if (!list || (size != (2 * sizeof(*list))))
@@ -57,7 +58,21 @@
 +	if (IS_ERR(mtd))
 +		return PTR_ERR(mtd);
 +
-+	ret = mtd_read(mtd, be32_to_cpup(list), 6, &retlen, (u_char *) mac);
++	if ((ret = mtd_read(mtd, be32_to_cpup(list), 17, &retlen, (u_char *) macbuf)) == 0) {
++		u8 __mac[6];
++		macbuf[17] = '\0';
++		if (sscanf(macbuf, "%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx",
++			&__mac[0], &__mac[1], &__mac[2], &__mac[3],
++			&__mac[4], &__mac[5]) == 6) {
++			memcpy(mac, __mac, 6);
++		} else {
++			memcpy(mac, macbuf, 6);
++		}
++	} else {
++		ret = mtd_read(mtd, be32_to_cpup(list), 6, &retlen, (u_char *) mac);
++	}
++	((u8 *)mac)[0] &= 0xfe;  /* clear multicast bit */
++
 +	put_mtd_device(mtd);
 +
 +	return ret;
